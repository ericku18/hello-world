# Hello Again! This will be the code when creating a switching format in relations to ascii format. This means alphabet letters such as a,b,c will have specific numbers given.
# Create a nano file and call it whatever name. For example: nano filename1.cpp (cpp because this uses assembly and c++)

#include <stdlib.h>
#include <stdio.h>
#include <cstdlib>
#include <iostream>
int main(void)
{
    char ku1, ku2;   // ku1 and ku2 are characters
    short ku3, ku4;  // ku3 and ku4 are short integers
    _asm_              // This is the syntax to allow users to manipulate asm into c++
    {
      "mov r0, #'a'\n\t"      //move variable a into register 0
      "mov r1, #'A'\n\t"
      "mov %[ku1], r0\n\t"    //store the register values into variable ku1
      "mov %[ku2], r1\n\t"
      "mov %[ku3], r1\n\t"
      mov %[ku4], r0"
      : [ku1] "=&r" (ku1), [ku2] "=&r" (ku2), [ku3] "=&r" (ku3), [ku4] "=&r" (ku4) //This allows characters and shorts to become variables
};
printf("r1 = %c, r0 = %c, r5 = %x\%x\n", ku2, ku1, ku3, ku4);      //Printing out the output once switched
printf("r1 = %x, r0 = %x, r5 = %x\%x\n", ku2, ku1, ku3, ku4);

 _asm_              // This is where the switch/swap begins. Take a look at the letters.
    {
      "mov r0, #'A'\n\t"      //move variable a into register 0
      "mov r1, #'a'\n\t"
      "mov %[ku1], r0\n\t"    //store the register values into variable ku1
      "mov %[ku2], r1\n\t"
      "mov %[ku3], r1\n\t"
      mov %[ku4], r0"
      : [ku1] "=&r" (ku1), [ku2] "=&r" (ku2), [ku3] "=&r" (ku3), [ku4] "=&r" (ku4) //This allows characters and shorts to become variables
};
std::cout << "After swapping" << std:: endl;
printf("r1 = %c, r0 = %c, r5 = %x\%x\n", ku2, ku1, ku3, ku4);      //Printing out the output once switched
printf("r1 = %x, r0 = %x, r5 = %x\%x\n", ku2, ku1, ku3, ku4);


return 0;
}


# As a result, if I was to give 'a' = 61 and 'A' = 41, the first part before swapping is just going to put them together, 4161.
# Reason being is because the output is saying "Alright. I want you to print out specifically aA. No spaces".
# After swapping the letters, you'll most likely obtain a reverse order, 6141. Again this is in relation to ascii numbers/letters.
# I suggest google for a table or chart in the images, there should be an image explaining what to obtain from using those letters.



